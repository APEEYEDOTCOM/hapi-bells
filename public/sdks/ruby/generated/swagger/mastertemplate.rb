# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module silica
  #
  # A service client - single point of access to the REST API.
  #
  class MASTERTEMPLATE < MsRest::ServiceClient
    include MsRest::Serialization

    # @return [String] the base URI of the service.
    attr_accessor :base_url

    # @return [GetSystemApi] get_system_api
    attr_reader :get_system_api

    # @return [GetSystemSessionApi] get_system_session_api
    attr_reader :get_system_session_api

    # @return [GetSystemUseragentApi] get_system_useragent_api
    attr_reader :get_system_useragent_api

    # @return [GetSystemGeneratesdkApi] get_system_generatesdk_api
    attr_reader :get_system_generatesdk_api

    #
    # Creates initializes a new instance of the MASTERTEMPLATE class.
    # @param credentials [MsRest::ServiceClientCredentials] credentials to authorize HTTP requests made by the service client.
    # @param base_url [String] the base URI of the service.
    # @param options [Array] filters to be applied to the HTTP requests.
    #
    def initialize(credentials = nil, base_url = nil, options = nil)
      super(credentials, options)
      @base_url = base_url || 'http://localhost:8082/'

      fail ArgumentError, 'invalid type of credentials input parameter' unless credentials.is_a?(MsRest::ServiceClientCredentials) unless credentials.nil?
      @credentials = credentials

      @get_system_api = GetSystemApi.new(self)
      @get_system_session_api = GetSystemSessionApi.new(self)
      @get_system_useragent_api = GetSystemUseragentApi.new(self)
      @get_system_generatesdk_api = GetSystemGeneratesdkApi.new(self)
      add_telemetry
    end

    #
    # Makes a request and returns the body of the response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Hash{String=>String}] containing the body of the response.
    # Example:
    #
    #  request_content = "{'location':'westus','tags':{'tag1':'val1','tag2':'val2'}}"
    #  path = "/path"
    #  options = {
    #    body: request_content,
    #    query_params: {'api-version' => '2016-02-01'}
    #  }
    #  result = @client.make_request(:put, path, options)
    #
    def make_request(method, path, options = {})
      result = make_request_with_http_info(method, path, options)
      result.body unless result.nil?
    end

    #
    # Makes a request and returns the operation response.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [MsRest::HttpOperationResponse] Operation response containing the request, response and status.
    #
    def make_request_with_http_info(method, path, options = {})
      result = make_request_async(method, path, options).value!
      result.body = result.response.body.to_s.empty? ? nil : JSON.load(result.response.body)
      result
    end

    #
    # Makes a request asynchronously.
    # @param method [Symbol] with any of the following values :get, :put, :post, :patch, :delete.
    # @param path [String] the path, relative to {base_url}.
    # @param options [Hash{String=>String}] specifying any request options like :body.
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def make_request_async(method, path, options = {})
      fail ArgumentError, 'method is nil' if method.nil?
      fail ArgumentError, 'path is nil' if path.nil?

      request_url = options[:base_url] || @base_url

      request_headers = @request_headers
      options.merge!({headers: request_headers.merge(options[:headers] || {})})
      options.merge!({credentials: @credentials}) unless @credentials.nil?

      super(request_url, method, path, options)
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_user_refreshtokenforuseraccount(body = nil, custom_headers = nil)
      response = post_user_refreshtokenforuseraccount_async(body, custom_headers).value!
      nil
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_user_refreshtokenforuseraccount_with_http_info(body = nil, custom_headers = nil)
      post_user_refreshtokenforuseraccount_async(body, custom_headers).value!
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_user_refreshtokenforuseraccount_async(body = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = silica::Models::Model1.mapper()
      request_content = self.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'User/RefreshTokenForUserAccount/'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Step 1. Create a user account.
    #
    # Step 1. Create a new user account to allow API interaction.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_user_registeraccounttoreceivetoken(body = nil, custom_headers = nil)
      response = post_user_registeraccounttoreceivetoken_async(body, custom_headers).value!
      nil
    end

    #
    # Step 1. Create a user account.
    #
    # Step 1. Create a new user account to allow API interaction.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_user_registeraccounttoreceivetoken_with_http_info(body = nil, custom_headers = nil)
      post_user_registeraccounttoreceivetoken_async(body, custom_headers).value!
    end

    #
    # Step 1. Create a user account.
    #
    # Step 1. Create a new user account to allow API interaction.
    #
    # @param body [Model1]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_user_registeraccounttoreceivetoken_async(body = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = silica::Models::Model1.mapper()
      request_content = self.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'User/RegisterAccountToReceiveToken/'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_user_requestaudittrail(body = nil, custom_headers = nil)
      response = post_user_requestaudittrail_async(body, custom_headers).value!
      nil
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_user_requestaudittrail_with_http_info(body = nil, custom_headers = nil)
      post_user_requestaudittrail_async(body, custom_headers).value!
    end

    #
    # Step 3. Create new user account bearer token.
    #
    # Step 3. Create a new bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_user_requestaudittrail_async(body = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = silica::Models::Model1.mapper()
      request_content = self.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'User/RequestAuditTrail/'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

    #
    # Step 2. Retrieve user account bearer token.
    #
    # Step 2. Return the bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def post_user_retrievetokenforuseraccount(body = nil, custom_headers = nil)
      response = post_user_retrievetokenforuseraccount_async(body, custom_headers).value!
      nil
    end

    #
    # Step 2. Retrieve user account bearer token.
    #
    # Step 2. Return the bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def post_user_retrievetokenforuseraccount_with_http_info(body = nil, custom_headers = nil)
      post_user_retrievetokenforuseraccount_async(body, custom_headers).value!
    end

    #
    # Step 2. Retrieve user account bearer token.
    #
    # Step 2. Return the bearer token associated with the user account.
    #
    # @param body [Model1]
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def post_user_retrievetokenforuseraccount_async(body = nil, custom_headers = nil)


      request_headers = {}

      request_headers['Content-Type'] = 'application/json; charset=utf-8'

      # Serialize Request
      request_mapper = silica::Models::Model1.mapper()
      request_content = self.serialize(request_mapper,  body, 'body')
      request_content = request_content != nil ? JSON.generate(request_content, quirks_mode: true) : nil

      path_template = 'User/RetrieveTokenForUserAccount/'

      request_url = @base_url || self.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          body: request_content,
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = self.make_request_async(:post, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end


    private
    #
    # Adds telemetry information.
    #
    def add_telemetry
        sdk_information = 'swagger'
        if defined? silica::VERSION
          sdk_information = "#{sdk_information}/#{silica::VERSION}"
        end
        add_user_agent_information(sdk_information)
    end
  end
end
