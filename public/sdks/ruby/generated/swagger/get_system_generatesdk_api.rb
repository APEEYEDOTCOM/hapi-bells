# encoding: utf-8
# Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.

module silica
  #
  # Master API Teplate with cross cutting concerns baked into the template.
  #
  class GetSystemGeneratesdkApi

    #
    # Creates and initializes a new instance of the GetSystemGeneratesdkApi class.
    # @param client service class for accessing basic functionality.
    #
    def initialize(client)
      @client = client
    end

    # @return [MASTERTEMPLATE] reference to the MASTERTEMPLATE
    attr_reader :client

    #
    # API Heartbeat Monitoring
    #
    # Endpoint used for Heartbeat Monitoring. Monitoring will use this endpoint to
    # check if the API is up and available.
    #
    # @param api_key [String] Client API Key
    # @param swagger_jsonurl [String] Url path to swagger.json file
    # @param language [Enum] Development language to generate SDK for. Possible
    # values include: 'csharp', 'go', 'java', 'nodejs', 'python', 'ruby'
    # @param namespace [String] User selected namespace
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    #
    def key_swaggerjsonurl_language_namespace(api_key, swagger_jsonurl, language, namespace, custom_headers = nil)
      response = key_swaggerjsonurl_language_namespace_async(api_key, swagger_jsonurl, language, namespace, custom_headers).value!
      nil
    end

    #
    # API Heartbeat Monitoring
    #
    # Endpoint used for Heartbeat Monitoring. Monitoring will use this endpoint to
    # check if the API is up and available.
    #
    # @param api_key [String] Client API Key
    # @param swagger_jsonurl [String] Url path to swagger.json file
    # @param language [Enum] Development language to generate SDK for. Possible
    # values include: 'csharp', 'go', 'java', 'nodejs', 'python', 'ruby'
    # @param namespace [String] User selected namespace
    # @param custom_headers [Hash{String => String}] A hash of custom headers that
    # will be added to the HTTP request.
    #
    # @return [MsRest::HttpOperationResponse] HTTP response information.
    #
    def key_swaggerjsonurl_language_namespace_with_http_info(api_key, swagger_jsonurl, language, namespace, custom_headers = nil)
      key_swaggerjsonurl_language_namespace_async(api_key, swagger_jsonurl, language, namespace, custom_headers).value!
    end

    #
    # API Heartbeat Monitoring
    #
    # Endpoint used for Heartbeat Monitoring. Monitoring will use this endpoint to
    # check if the API is up and available.
    #
    # @param api_key [String] Client API Key
    # @param swagger_jsonurl [String] Url path to swagger.json file
    # @param language [Enum] Development language to generate SDK for. Possible
    # values include: 'csharp', 'go', 'java', 'nodejs', 'python', 'ruby'
    # @param namespace [String] User selected namespace
    # @param [Hash{String => String}] A hash of custom headers that will be added
    # to the HTTP request.
    #
    # @return [Concurrent::Promise] Promise object which holds the HTTP response.
    #
    def key_swaggerjsonurl_language_namespace_async(api_key, swagger_jsonurl, language, namespace, custom_headers = nil)
      fail ArgumentError, 'api_key is nil' if api_key.nil?
      fail ArgumentError, 'swagger_jsonurl is nil' if swagger_jsonurl.nil?
      fail ArgumentError, 'language is nil' if language.nil?
      fail ArgumentError, 'namespace is nil' if namespace.nil?


      request_headers = {}
      path_template = 'System/GenerateSDK/{API_Key}/{swaggerJSONurl}/{language}/{namespace}'

      request_url = @base_url || @client.base_url

      options = {
          middlewares: [[MsRest::RetryPolicyMiddleware, times: 3, retry: 0.02], [:cookie_jar]],
          path_params: {'API_Key' => api_key,'swaggerJSONurl' => swagger_jsonurl,'language' => language,'namespace' => namespace},
          headers: request_headers.merge(custom_headers || {}),
          base_url: request_url
      }
      promise = @client.make_request_async(:get, path_template, options)

      promise = promise.then do |result|
        http_response = result.response
        status_code = http_response.status
        response_content = http_response.body
        unless status_code >= 200 && status_code < 300
          error_model = JSON.load(response_content)
          fail MsRest::HttpOperationError.new(result.request, http_response, error_model)
        end


        result
      end

      promise.execute
    end

  end
end
