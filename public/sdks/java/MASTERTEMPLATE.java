/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package silica;

import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import silica.models.Model1;
import com.microsoft.rest.RestClient;

/**
 * The interface for MASTERTEMPLATE class.
 */
public interface MASTERTEMPLATE {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "http://localhost:8082/";

    /**
     * Gets the GetSystemApis object to access its operations.
     * @return the GetSystemApis object.
     */
    GetSystemApis getSystemApis();

    /**
     * Gets the GetSystemSessionApis object to access its operations.
     * @return the GetSystemSessionApis object.
     */
    GetSystemSessionApis getSystemSessionApis();

    /**
     * Gets the GetSystemUseragentApis object to access its operations.
     * @return the GetSystemUseragentApis object.
     */
    GetSystemUseragentApis getSystemUseragentApis();

    /**
     * Gets the GetSystemGeneratesdkApis object to access its operations.
     * @return the GetSystemGeneratesdkApis object.
     */
    GetSystemGeneratesdkApis getSystemGeneratesdkApis();

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRefreshtokenforuseraccount();

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRefreshtokenforuseraccountAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRefreshtokenforuseraccountAsync();

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRefreshtokenforuseraccountWithServiceResponseAsync();
    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRefreshtokenforuseraccount(Model1 body);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRefreshtokenforuseraccountAsync(Model1 body, final ServiceCallback<Void> serviceCallback);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRefreshtokenforuseraccountAsync(Model1 body);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRefreshtokenforuseraccountWithServiceResponseAsync(Model1 body);

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRegisteraccounttoreceivetoken();

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRegisteraccounttoreceivetokenAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRegisteraccounttoreceivetokenAsync();

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRegisteraccounttoreceivetokenWithServiceResponseAsync();
    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRegisteraccounttoreceivetoken(Model1 body);

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @param body the Model1 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRegisteraccounttoreceivetokenAsync(Model1 body, final ServiceCallback<Void> serviceCallback);

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRegisteraccounttoreceivetokenAsync(Model1 body);

    /**
     * Step 1. Create a user account.
     * Step 1. Create a new user account to allow API interaction.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRegisteraccounttoreceivetokenWithServiceResponseAsync(Model1 body);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRequestaudittrail();

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRequestaudittrailAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRequestaudittrailAsync();

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRequestaudittrailWithServiceResponseAsync();
    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRequestaudittrail(Model1 body);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRequestaudittrailAsync(Model1 body, final ServiceCallback<Void> serviceCallback);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRequestaudittrailAsync(Model1 body);

    /**
     * Step 3. Create new user account bearer token.
     * Step 3. Create a new bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRequestaudittrailWithServiceResponseAsync(Model1 body);

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRetrievetokenforuseraccount();

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRetrievetokenforuseraccountAsync(final ServiceCallback<Void> serviceCallback);

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRetrievetokenforuseraccountAsync();

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRetrievetokenforuseraccountWithServiceResponseAsync();
    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    void postUserRetrievetokenforuseraccount(Model1 body);

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<Void> postUserRetrievetokenforuseraccountAsync(Model1 body, final ServiceCallback<Void> serviceCallback);

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<Void> postUserRetrievetokenforuseraccountAsync(Model1 body);

    /**
     * Step 2. Retrieve user account bearer token.
     * Step 2. Return the bearer token associated with the user account.
     *
     * @param body the Model1 value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    Observable<ServiceResponse<Void>> postUserRetrievetokenforuseraccountWithServiceResponseAsync(Model1 body);

}
