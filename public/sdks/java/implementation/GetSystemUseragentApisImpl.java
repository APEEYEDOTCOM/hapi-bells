/**
 * Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package silica.implementation;

import retrofit2.Retrofit;
import silica.GetSystemUseragentApis;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import okhttp3.ResponseBody;
import retrofit2.http.GET;
import retrofit2.http.Headers;
import retrofit2.http.Path;
import retrofit2.Response;
import rx.functions.Func1;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in GetSystemUseragentApis.
 */
public class GetSystemUseragentApisImpl implements GetSystemUseragentApis {
    /** The Retrofit service to perform REST calls. */
    private GetSystemUseragentApisService service;
    /** The service client containing this operation class. */
    private MASTERTEMPLATEImpl client;

    /**
     * Initializes an instance of GetSystemUseragentApis.
     *
     * @param retrofit the Retrofit instance built from a Retrofit Builder.
     * @param client the instance of the service client containing this operation class.
     */
    public GetSystemUseragentApisImpl(Retrofit retrofit, MASTERTEMPLATEImpl client) {
        this.service = retrofit.create(GetSystemUseragentApisService.class);
        this.client = client;
    }

    /**
     * The interface defining all the services for GetSystemUseragentApis to be
     * used by Retrofit to perform actually REST calls.
     */
    interface GetSystemUseragentApisService {
        @Headers({ "Content-Type: application/json; charset=utf-8", "x-ms-logging-context: silica.GetSystemUseragentApis key" })
        @GET("System/UserAgent/{API_Key}/")
        Observable<Response<ResponseBody>> key(@Path("API_Key") String aPIKey);

    }

    /**
     * Consumer User Agent Information.
     * Endpoint used to return the Consumer User Agent Information.
     *
     * @param aPIKey Client API Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     */
    public void key(String aPIKey) {
        keyWithServiceResponseAsync(aPIKey).toBlocking().single().body();
    }

    /**
     * Consumer User Agent Information.
     * Endpoint used to return the Consumer User Agent Information.
     *
     * @param aPIKey Client API Key
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    public ServiceFuture<Void> keyAsync(String aPIKey, final ServiceCallback<Void> serviceCallback) {
        return ServiceFuture.fromResponse(keyWithServiceResponseAsync(aPIKey), serviceCallback);
    }

    /**
     * Consumer User Agent Information.
     * Endpoint used to return the Consumer User Agent Information.
     *
     * @param aPIKey Client API Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<Void> keyAsync(String aPIKey) {
        return keyWithServiceResponseAsync(aPIKey).map(new Func1<ServiceResponse<Void>, Void>() {
            @Override
            public Void call(ServiceResponse<Void> response) {
                return response.body();
            }
        });
    }

    /**
     * Consumer User Agent Information.
     * Endpoint used to return the Consumer User Agent Information.
     *
     * @param aPIKey Client API Key
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceResponse} object if successful.
     */
    public Observable<ServiceResponse<Void>> keyWithServiceResponseAsync(String aPIKey) {
        if (aPIKey == null) {
            throw new IllegalArgumentException("Parameter aPIKey is required and cannot be null.");
        }
        return service.key(aPIKey)
            .flatMap(new Func1<Response<ResponseBody>, Observable<ServiceResponse<Void>>>() {
                @Override
                public Observable<ServiceResponse<Void>> call(Response<ResponseBody> response) {
                    try {
                        ServiceResponse<Void> clientResponse = keyDelegate(response);
                        return Observable.just(clientResponse);
                    } catch (Throwable t) {
                        return Observable.error(t);
                    }
                }
            });
    }

    private ServiceResponse<Void> keyDelegate(Response<ResponseBody> response) throws RestException, IOException, IllegalArgumentException {
        return this.client.restClient().responseBuilderFactory().<Void, RestException>newInstance(this.client.serializerAdapter())
                .build(response);
    }

}
