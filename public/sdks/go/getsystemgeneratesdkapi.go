package silica

// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

import (
    "github.com/Azure/go-autorest/autorest"
    "github.com/Azure/go-autorest/autorest/azure"
    "net/http"
)

// GetSystemGeneratesdkAPIClient is the master API Teplate with cross cutting
// concerns baked into the template.
type GetSystemGeneratesdkAPIClient struct {
    ManagementClient
}
// NewGetSystemGeneratesdkAPIClient creates an instance of the
// GetSystemGeneratesdkAPIClient client.
func NewGetSystemGeneratesdkAPIClient() GetSystemGeneratesdkAPIClient {
        return NewGetSystemGeneratesdkAPIClientWithBaseURI(DefaultBaseURI, )
        }

// NewGetSystemGeneratesdkAPIClientWithBaseURI creates an instance of the
// GetSystemGeneratesdkAPIClient client.
    func NewGetSystemGeneratesdkAPIClientWithBaseURI(baseURI string, ) GetSystemGeneratesdkAPIClient {
        return GetSystemGeneratesdkAPIClient{ NewWithBaseURI(baseURI, )}
    }

// KeySwaggerjsonurlLanguageNamespace endpoint used for Heartbeat Monitoring.
// Monitoring will use this endpoint to check if the API is up and available.
//
// APIKey is client API Key swaggerJSONurl is url path to swagger.json file
// language is development language to generate SDK for. namespace is user
// selected namespace
func (client GetSystemGeneratesdkAPIClient) KeySwaggerjsonurlLanguageNamespace(APIKey string, swaggerJSONurl string, language string, namespace string) (result autorest.Response, err error) {
    req, err := client.KeySwaggerjsonurlLanguageNamespacePreparer(APIKey, swaggerJSONurl, language, namespace)
    if err != nil {
        err = autorest.NewErrorWithError(err, "silica.GetSystemGeneratesdkAPIClient", "KeySwaggerjsonurlLanguageNamespace", nil , "Failure preparing request")
        return
    }

    resp, err := client.KeySwaggerjsonurlLanguageNamespaceSender(req)
    if err != nil {
        result.Response = resp
        err = autorest.NewErrorWithError(err, "silica.GetSystemGeneratesdkAPIClient", "KeySwaggerjsonurlLanguageNamespace", resp, "Failure sending request")
        return
    }

    result, err = client.KeySwaggerjsonurlLanguageNamespaceResponder(resp)
    if err != nil {
        err = autorest.NewErrorWithError(err, "silica.GetSystemGeneratesdkAPIClient", "KeySwaggerjsonurlLanguageNamespace", resp, "Failure responding to request")
    }

    return
}

// KeySwaggerjsonurlLanguageNamespacePreparer prepares the KeySwaggerjsonurlLanguageNamespace request.
func (client GetSystemGeneratesdkAPIClient) KeySwaggerjsonurlLanguageNamespacePreparer(APIKey string, swaggerJSONurl string, language string, namespace string) (*http.Request, error) {
    pathParameters := map[string]interface{} {
    "API_Key": autorest.Encode("path",APIKey),
    "language": autorest.Encode("path",language),
    "namespace": autorest.Encode("path",namespace),
    "swaggerJSONurl": autorest.Encode("path",swaggerJSONurl),
    }

    preparer := autorest.CreatePreparer(
                        autorest.AsGet(),
                        autorest.WithBaseURL(client.BaseURI),
                        autorest.WithPathParameters("/System/GenerateSDK/{API_Key}/{swaggerJSONurl}/{language}/{namespace}",pathParameters))
    return preparer.Prepare(&http.Request{})
}

// KeySwaggerjsonurlLanguageNamespaceSender sends the KeySwaggerjsonurlLanguageNamespace request. The method will close the
// http.Response Body if it receives an error.
func (client GetSystemGeneratesdkAPIClient) KeySwaggerjsonurlLanguageNamespaceSender(req *http.Request) (*http.Response, error) {
    return autorest.SendWithSender(client, req)
}

// KeySwaggerjsonurlLanguageNamespaceResponder handles the response to the KeySwaggerjsonurlLanguageNamespace request. The method always
// closes the http.Response Body.
func (client GetSystemGeneratesdkAPIClient) KeySwaggerjsonurlLanguageNamespaceResponder(resp *http.Response) (result autorest.Response, err error) {
    err = autorest.Respond(
            resp,
            client.ByInspecting(),
            azure.WithErrorUnlessStatusCode(http.StatusOK),
            autorest.ByClosing())
    result.Response = resp
    return
}

