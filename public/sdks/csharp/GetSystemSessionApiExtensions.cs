// Code generated by Microsoft (R) AutoRest Code Generator 1.0.1.0
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.

namespace silica
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for GetSystemSessionApi.
    /// </summary>
    public static partial class GetSystemSessionApiExtensions
    {
            /// <summary>
            /// API Heartbeat Monitoring
            /// </summary>
            /// <remarks>
            /// Endpoint used for Heartbeat Monitoring. Monitoring will use this endpoint
            /// to check if the API is up and available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aPIKey'>
            /// Client API Key
            /// </param>
            public static void Key(this IGetSystemSessionApi operations, string aPIKey)
            {
                operations.KeyAsync(aPIKey).GetAwaiter().GetResult();
            }

            /// <summary>
            /// API Heartbeat Monitoring
            /// </summary>
            /// <remarks>
            /// Endpoint used for Heartbeat Monitoring. Monitoring will use this endpoint
            /// to check if the API is up and available.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='aPIKey'>
            /// Client API Key
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task KeyAsync(this IGetSystemSessionApi operations, string aPIKey, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.KeyWithHttpMessagesAsync(aPIKey, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

    }
}
